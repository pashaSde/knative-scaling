sudo su
swapoff -a
vi /etc/fstab
# Comment out the swap line

vi /etc/ufw/sysctl.conf
# Add the following lines:
net/bridge/bridge-nf-call-ip6tables = 1
net/bridge/bridge-nf-call-iptables = 1
net/bridge/bridge-nf-call-arptables = 1

# Now reboot

sudo su
apt-get install ebtables ethtool

# Now reboot

Kube and other installations:

sudo apt install -y curl apt-transport-https
sudo sed -i '/swap/d' /etc/fstab # Can skip this if you already did it

on both master and nodes:

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

Install Containerd:

sudo apt install -y containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

Install Kubernetes Packages:

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.asc
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

Intialize the Master Node:
sudo kubeadm init --pod-network-cidr=192.168.0.0/16

Config kubectl: (On Master Node only?)

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Install CNI:

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

Join the worker nodes:
- get token

kubeadm token create --print-join-command

- Run on worker nodes:
sudo kubeadm join <master-ip>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>


- Run Kubectl from any node
mkdir -p $HOME/.kube
- copy /etc/kubernetes/admin.conf to clipboard

-- works till this point

# Install istio (Not working)
Step 1. curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.25.0 sh -
cd istio-1.25.0
export PATH=$PWD/bin:$PATH

Step 2. kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
  kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.1/standard-install.yaml

Step 3. istioctl install --set profile=minimal --skip-confirmation  --- (Getting ZTunnel Error with ambient profile)

Step 4. kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.25/samples/addons/ingress-gateway.yaml

# Install Kourier instead

kubectl apply -f https://github.com/knative/net-kourier/releases/latest/download/kourier.yaml
kubectl patch configmap/config-network --namespace knative-serving --type merge --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}'


--

run pods on the master node:

kubectl taint nodes --all node-role.kubernetes.io/control-plane-

--

Install Metrics Server:

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

-- For Knative
For knative serving:

kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-crds.yaml
kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-core.yaml

-- For Kourier
kubectl apply -f https://github.com/knative/net-kourier/releases/download/knative-v1.17.0/kourier.yaml

kubectl patch configmap/config-network \
  --namespace knative-serving \
  --type merge \
  --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}'
